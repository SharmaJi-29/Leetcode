# Longest Happy String

## Intuition

We are given three integers a, b, and c, representing the number of characters a, b, and c we can use. The goal is to create the longest string possible with these 
characters while making sure that no three consecutive characters are the same.

To make the string as long as possible, we should try to use the character that appears most often without breaking the rule about three consecutive characters. If 
using the most frequent character would cause three in a row, we use the next most frequent character instead.

We can use a max-heap to solve this problem efficiently. The heap lets us pick the character with the highest remaining count, and switch to the next character if 
needed to avoid triples.

First, we put the counts of a, b, and c into a max-heap. If adding the most frequent character would create three in a row, we pick the second most frequent one. 
After adding a character, we reduce its count. If it still has characters left, we put it back into the heap.

By always selecting the character with the highest count, except when it would break the rule, we ensure the string is as long as possible.

# Algorithm

1. Create a max-heap pq to store the counts of a, b, and c in descending order of their counts and a string ans to store the string answer.
2. Push (a, 'a'), (b, 'b'), and (c, 'c') into the heap if their counts are greater than 0.
3. Iterate Until maxheap is Empty:
    - Pop the most frequent character from the heap.
    - If adding this character would result in three consecutive identical characters in the answer string, do the following:
        - Check the next most frequent character by popping it from the heap.
        - Add this second character to the answer. If its count is still positive after use, push it back into the heap.
        - Push the previously popped character (the most frequent) back into the heap without adding it to the answer yet.
    - Otherwise, if the character can be added without violating the three-consecutive rule, append it to ans and decrement its count.
    - If a characterâ€™s count is still greater than 0 after being appended, push it back into the heap.
4. Once the heap is empty and no more characters can be added, return the constructed string ans as the result.

## Complexity Analysis

### Time complexity: O(a+b+c)

Each operation on the priority queue (insertion or removal) takes O(logk) time, where k is the number of distinct characters. In this case, k is equal to 3, so each
heap operation takes O(log3), which simplifies to O(1) time.

In each iteration, one character is either added to the result string or skipped, and there are a+b+c characters in total. Therefore, the total number of iterations 
is proportional to a+b+c.

Thus, the overall time complexity is O(a+b+c).

### Space complexity: O(1)

The space complexity is O(1), as the heap contains at most three elements and the result string uses O(a+b+c) space (not counted in the solution space).
